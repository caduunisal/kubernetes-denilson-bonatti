#Init containers
#YAML que utilizamos:

---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: demo
  name: demo
spec:
  containers:
  - image: httpd
    name: demo
  initContainers:
  - image: busybox:1.28
    name: waitfordns
    command:
      - sh
      - -c
      - until nslookup order-database; do echo "Trying to resolve order-database"; sleep 2; done


#Multi-container pods
#YAML que utilizamos:

---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: demo-multi
  name: demo-multi
spec:
  containers:
  - image: httpd
    name: demo
  - image: alpine
    name: debug
    command:
      - sh
      - -c
      - sleep 99999999


#lifecycle: Como um pod é terminado?
#YAML que utilizamos:

---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: worker-pod
  name: worker-pod
spec:
  terminationGracePeriodSeconds: 60
  containers:
  - image: alpine
    name: alpine
    command:
      - "sleep"
      - "99999999"
    lifecycle:
      preStop:
        exec:
          command:
            - sh
            - -c
            - curl 10.244.2.32




======================================================


Resumo
TLS: Configuração da HTTPS
Criação do certificado e chave TLS:

openssl req -x509 \
    -nodes \
    -days 365 \
    -newkey rsa:2048 \
    -keyout tls.key \
    -out tls.crt \
    -subj '/CN=*.demo.com/O=mateusmullerme' \
    -addext 'subjectAltName = DNS:*.demo.com'
 
openssl x509 -in tls.crt -text
 
kubectl create secret tls demo-domain-secret --key tls.key --cert tls.crt~




======================================================



Resumo
Configuração de VirtualHost do NGINX via ConfigMap
Vamos fazer um exemplo de utilização do ConfigMap para injetar a configuração de Virtual Host dentro do pod do NGINX.

Aqui está a configuração para você utilizar também:

server {
    listen 80;
    listen [::]:80;

    root /usr/share/nginx/app1;
    index index.html index.htm index.nginx-debian.html;

    server_name app.localhost.com www.app.localhost.com;

    location / {
            try_files $uri $uri/ =404;
    }
}
Secret Types
O Secret nada mais é do que um ConfigMap encodado em base64. Não há nada de encriptação nos secrets.

Existem vários tipos de secrets que fazem o enforcing de campos informados conforme você pode conferir aqui.






=======================================================


# install kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl

# install minikube
echo downloading minikube, check version
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

sudo chmod +x minikube
sudo mv minikube /usr/local/bin



